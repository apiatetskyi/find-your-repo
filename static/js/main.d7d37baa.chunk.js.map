{"version":3,"sources":["serviceWorker.js","api/github.js","settings.js","hooks/useFetch.js","hooks/useUrlParams.js","components/SearchBar.js","components/Sorting.js","components/RepositoryCard.js","components/RepositoryList.js","components/App.js","utils.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","github","axios","create","baseURL","process","interceptors","request","use","params","per_page","defaultUrlParam","sort","order","sortingOptions","label","useFetch","api","path","useState","loading","setLoading","response","setResponse","errorMessage","setErrorMessage","fetchData","useCallback","a","get","ReactDOM","unstable_batchedUpdates","data","status","useUrlParams","defaultParams","URLSearchParams","search","entries","reduce","key","value","parseUrlParams","setParams","updateParams","prevParams","Object","keys","every","param","isSameParams","newParams","queryString","history","pushState","pathname","toString","SearchBar","React","memo","onSubmit","searchPhrase","setSearchPhrase","noValidate","autoComplete","event","preventDefault","Grid","container","spacing","item","xs","sm","md","TextField","type","helperText","fullWidth","variant","onChange","target","alignItems","Button","color","size","endIcon","Sorting","options","anchorEl","setAnchorEl","setLabel","aria-haspopup","onClick","currentTarget","Menu","keepMounted","open","onClose","option","map","MenuItem","onSelect","useStyles","makeStyles","theme","root","position","content","padding","stars","bottom","right","display","maxWidth","typography","pxToRem","fontSize","starsIcon","marginRight","RepositoryCard","repository","classes","url","html_url","name","owner","stargazers_count","Card","className","CardContent","Typography","noWrap","login","CardActions","href","RepositoryList","repositories","repo","id","lg","useStyle","marginTop","h1","fontWeight","fontWeightBold","paper","section","sectionHeading","marginBottom","pagination","sorting","float","fontWeightRegular","alert","App","useEffect","q","items","perPage","Container","Alert","severity","Paper","page","LinearProgress","Pagination","onPageChange","count","total_count","Math","ceil","min","parseInt","URL","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","render","document","querySelector"],"mappings":"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","file":"static/js/main.d7d37baa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nexport const DEFAULT_PER_PAGE = 30;\nexport const MAX_SEARCH_RESULTS = 1000;\n\n/**\n * Create configured instance of axios for github api.\n */\nconst github = axios.create({\n  baseURL: process.env.REACT_APP_GITHUB_API,\n});\n\ngithub.interceptors.request.use((config) => {\n  config.params = config.params || {};\n  config.params.per_page = DEFAULT_PER_PAGE;\n\n  return config;\n});\n\nexport default github;\n","import { DEFAULT_PER_PAGE } from \"./api/github\";\n\nexport const defaultUrlParam = {\n  per_page: DEFAULT_PER_PAGE,\n  sort: \"stars\",\n  order: \"desc\",\n};\n\nexport const sortingOptions = [\n  { label: \"DESC\", order: \"desc\" },\n  { label: \"ASC\", order: \"asc\" },\n];\n","import { useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst useFetch = (api, path) => {\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState({});\n  const [errorMessage, setErrorMessage] = useState();\n\n  const fetchData = useCallback(\n    async (params) => {\n      setLoading(true);\n      setErrorMessage(null);\n\n      try {\n        const response = await api.get(path, { params });\n\n        ReactDOM.unstable_batchedUpdates(() => {\n          setResponse(response.data);\n          setLoading(false);\n        });\n      } catch (error) {\n        switch (error.response.status) {\n          case 403:\n            setErrorMessage(\n              \"You exceeded rate limit 30 request per minute. Please try again later.\"\n            );\n            break;\n          case 422:\n            setErrorMessage(\n              \"Only the first 1000 search results are available.\"\n            );\n            break;\n          default: {\n            setErrorMessage(\n              \"Oops! Something went wrong. Please try again later.\"\n            );\n          }\n        }\n        setLoading(false);\n      }\n    },\n    [api, path]\n  );\n\n  return { response, errorMessage, loading, fetchData };\n};\n\nexport default useFetch;\n","import { useState } from \"react\";\n\nconst parseUrlParams = () => {\n  const params = new URLSearchParams(window.location.search);\n\n  return [...params.entries()].reduce((params, [key, value]) => {\n    params[key] = value;\n    return params;\n  }, {});\n};\n\nconst isSameParams = (prevParams, params) => {\n  return Object.keys(params).every(\n    (param) => params[param] === prevParams[param]\n  );\n};\n\nconst useUrlParams = (defaultParams) => {\n  const [params, setParams] = useState({\n    ...parseUrlParams(),\n    ...defaultParams,\n  });\n\n  const updateParams = (params) => {\n    setParams((prevParams) => {\n      if (isSameParams(prevParams, params)) {\n        return prevParams;\n      }\n\n      const newParams = { ...prevParams, ...params };\n      const queryString = new URLSearchParams(Object.entries(newParams));\n\n      window.history.pushState(\n        { params: newParams },\n        null,\n        `${window.location.pathname}?${queryString.toString()}`\n      );\n\n      return newParams;\n    });\n  };\n\n  return { params, updateParams };\n};\n\nexport default useUrlParams;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst SearchBar = React.memo(({ onSubmit, value = \"\" }) => {\n  const [searchPhrase, setSearchPhrase] = useState(value);\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    searchPhrase && onSubmit(searchPhrase);\n  };\n\n  const onChange = (event) => {\n    setSearchPhrase(event.target.value);\n  };\n\n  return (\n    <form noValidate autoComplete=\"off\" onSubmit={onFormSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={9} md={10}>\n          <TextField\n            label=\"Enter repository name\"\n            type=\"search\"\n            helperText={\"\"}\n            fullWidth\n            variant=\"outlined\"\n            value={searchPhrase}\n            onChange={onChange}\n          />\n        </Grid>\n        <Grid item sm={3} md={2} container alignItems=\"stretch\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            fullWidth\n            endIcon={<SearchIcon />}\n          >\n            Find\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n});\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default SearchBar;\n","import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst Sorting = React.memo(({ options = [], onChange = () => {} }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [label, setLabel] = useState(options[0].label);\n\n  const onButtonClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClose = (option) => {\n    setAnchorEl(null);\n  };\n\n  const onSelect = (option) => {\n    setLabel(option.label);\n    onChange(option.order);\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <Button aria-haspopup=\"true\" onClick={onButtonClick}>\n        Stars: {label}\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClose}\n      >\n        {options.map((option) => (\n          <MenuItem\n            key={option.label}\n            onClick={() => {\n              onSelect(option);\n            }}\n          >\n            {option.label}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n});\n\nexport default Sorting;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconStars from \"@material-ui/icons/Stars\";\nimport IconGithub from \"@material-ui/icons/GitHub\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  content: {\n    padding: theme.spacing(1),\n  },\n  stars: {\n    position: \"absolute\",\n    bottom: theme.spacing(1.5),\n    right: theme.spacing(1),\n\n    display: \"flex\",\n    alignItems: \"center\",\n    maxWidth: theme.typography.pxToRem(60),\n\n    fontSize: theme.typography.pxToRem(12),\n  },\n  starsIcon: {\n    marginRight: theme.spacing(0.25),\n  },\n}));\n\nconst RepositoryCard = React.memo(({ repository }) => {\n  const classes = useStyles();\n  const { html_url: url, name, owner, stargazers_count } = repository;\n\n  return (\n    <Card className={classes.root}>\n      <CardContent className={classes.content}>\n        <Typography color=\"primary\" noWrap>\n          {name}\n        </Typography>\n\n        <Typography className={classes.stars}>\n          <IconStars className={classes.starsIcon} fontSize=\"small\" />\n          {stargazers_count}\n        </Typography>\n\n        <Typography color=\"textSecondary\" variant=\"caption\">\n          Author: {owner.login}\n        </Typography>\n      </CardContent>\n\n      <CardActions>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          href={url}\n          size=\"small\"\n          target=\"_blank\"\n          endIcon={<IconGithub />}\n        >\n          View on\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n\nRepositoryCard.propTypes = {\n  repository: PropTypes.object.isRequired,\n};\n\nexport default RepositoryCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Grid } from \"@material-ui/core\";\n\nimport RepositoryCard from \"./RepositoryCard\";\n\nconst RepositoryList = React.memo(({ repositories }) => {\n  return (\n    <Grid container spacing={2}>\n      {repositories.map((repo) => (\n        <Grid key={repo.id} item xs={12} sm={6} md={4} lg={2}>\n          <RepositoryCard repository={repo} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n});\n\nRepositoryList.propTypes = {\n  repositories: PropTypes.array.isRequired,\n};\n\nexport default RepositoryList;\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nimport github from \"../api/github\";\nimport { defaultUrlParam, sortingOptions } from \"../settings\";\nimport { getPagesAmount } from \"../utils\";\n\nimport useFetch from \"../hooks/useFetch\";\nimport useUrlParams from \"../hooks/useUrlParams\";\n\nimport SearchBar from \"./SearchBar\";\nimport Sorting from \"./Sorting\";\nimport RepositoryList from \"./RepositoryList\";\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n  },\n\n  h1: {\n    fontSize: theme.typography.pxToRem(28),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n\n  paper: {\n    padding: theme.spacing(2),\n  },\n\n  section: {\n    marginTop: theme.spacing(3),\n  },\n\n  sectionHeading: {\n    marginBottom: theme.spacing(2),\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n\n  pagination: {\n    marginTop: theme.spacing(2),\n  },\n\n  sorting: {\n    float: \"right\",\n    fontSize: theme.typography.pxToRem(14),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n\n  alert: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nconst App = () => {\n  const classes = useStyle();\n  const { params, updateParams } = useUrlParams(defaultUrlParam);\n  const { loading, response, errorMessage, fetchData } = useFetch(\n    github,\n    \"/search/repositories\"\n  );\n\n  useEffect(() => {\n    if (params.q) {\n      fetchData(params);\n    }\n  }, [params]);\n\n  const onSearch = (searchPhrase) => {\n    updateParams({ q: searchPhrase, page: 1 });\n  };\n\n  const onSorting = (order) => {\n    updateParams({ order: order, page: 1 });\n  };\n\n  const onPageChange = (page) => {\n    updateParams({ page });\n  };\n\n  return (\n    <Container className={classes.container} maxWidth=\"lg\">\n      {errorMessage && (\n        <Alert className={classes.alert} severity=\"warning\">\n          {errorMessage}\n        </Alert>\n      )}\n\n      <Typography className={classes.h1} variant=\"h1\">\n        Find your repo\n      </Typography>\n\n      <Paper className={`${classes.paper} ${classes.section}`}>\n        <SearchBar onSubmit={onSearch} value={params.q || \"\"} />\n      </Paper>\n      {loading && <LinearProgress className={classes.loading} />}\n\n      {!!response.items && (\n        <div className={classes.section}>\n          <div className={classes.sorting}>\n            <Sorting options={sortingOptions} onChange={onSorting} />\n          </div>\n          <Typography className={classes.sectionHeading} variant=\"h2\">\n            Search results\n          </Typography>\n          <RepositoryList repositories={response.items} />\n          <Pagination\n            className={classes.pagination}\n            onChange={(event, page) => {\n              onPageChange(page);\n            }}\n            count={getPagesAmount(\n              response.total_count,\n              defaultUrlParam.per_page\n            )}\n            color=\"primary\"\n            page={parseInt(params.page, 10) || 1}\n          />\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import { MAX_SEARCH_RESULTS } from \"./api/github\";\n\nexport const getQueryParam = (param) => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  return urlParams.get(param);\n};\n\nexport const getPagesAmount = (items, perPage) =>\n  Math.ceil(Math.min(MAX_SEARCH_RESULTS, items) / perPage);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\n\nserviceWorker.register();\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}